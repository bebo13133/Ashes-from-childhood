import { useState, useEffect, useRef } from 'react';
import './videoTrailerSection.css';

const VideoTrailerSection = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [showControls, setShowControls] = useState(false);
  const [shouldLoadPlayer, setShouldLoadPlayer] = useState(false);
  const playerRef = useRef(null);
  const sectionRef = useRef(null);

  // Intersection Observer –∑–∞ –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
        }
      },
      { threshold: 0.3 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => observer.disconnect();
  }, []);

  // Load YouTube IFrame API —Å–∞–º–æ –∫–æ–≥–∞—Ç–æ –µ –Ω—É–∂–Ω–æ
  useEffect(() => {
    if (!shouldLoadPlayer) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤–µ—á–µ –µ –∑–∞—Ä–µ–¥–µ–Ω–æ
    if (window.YT && window.YT.Player) {
      initPlayer();
      return;
    }

    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ YouTube IFrame API
    const tag = document.createElement('script');
    tag.src = 'https://www.youtube.com/iframe_api';
    const firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    window.onYouTubeIframeAPIReady = initPlayer;
  }, [shouldLoadPlayer]);

  const initPlayer = () => {
    if (playerRef.current) return;

    playerRef.current = new window.YT.Player('youtube-player', {
      videoId: 'sBpkjFZXO6c',
      playerVars: {
        controls: 0,
        modestbranding: 1,
        rel: 0,
        showinfo: 0,
        fs: 1,
        enablejsapi: 1,
        autoplay: 1,
        playsinline: 1,
        vq: 'hd1080'  // –§–æ—Ä—Å–∏—Ä–∞ HD –∫–∞—á–µ—Å—Ç–≤–æ
      },
      events: {
        onReady: onPlayerReady,
        onStateChange: onPlayerStateChange
      }
    });
  };

  const onPlayerReady = (event) => {
    // –§–æ—Ä—Å–∏—Ä–∞–π –Ω–∞–π-–≤–∏—Å–æ–∫–æ—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ
    const availableQualityLevels = event.target.getAvailableQualityLevels();
    if (availableQualityLevels.length > 0) {
      // –ò–∑–±–µ—Ä–∏ hd1080 –∏–ª–∏ hd720
      if (availableQualityLevels.includes('hd1080')) {
        event.target.setPlaybackQuality('hd1080');
      } else if (availableQualityLevels.includes('hd720')) {
        event.target.setPlaybackQuality('hd720');
      } else {
        event.target.setPlaybackQuality(availableQualityLevels[0]);
      }
    }
    // –ü—É—Å–Ω–∏ –≤–∏–¥–µ–æ—Ç–æ
    event.target.playVideo();
  };

  const onPlayerStateChange = (event) => {
    if (event.data === window.YT.PlayerState.PLAYING) {
      setIsPlaying(true);
    } else if (event.data === window.YT.PlayerState.PAUSED || event.data === window.YT.PlayerState.ENDED) {
      setIsPlaying(false);
    }
  };

  const handlePlayClick = () => {
    if (!shouldLoadPlayer) {
      // –ü—ä—Ä–≤–æ –∫–ª–∏–∫–≤–∞–Ω–µ - –∑–∞—Ä–µ–¥–∏ player-–∞
      setShouldLoadPlayer(true);
    } else if (playerRef.current) {
      // Player-–∞ –µ –∑–∞—Ä–µ–¥–µ–Ω - toggle play/pause
      togglePlay();
    }
  };

  const togglePlay = () => {
    if (!playerRef.current) return;

    if (isPlaying) {
      playerRef.current.pauseVideo();
    } else {
      playerRef.current.playVideo();
    }
  };

  const toggleMute = () => {
    if (!playerRef.current) return;

    if (isMuted) {
      playerRef.current.unMute();
      setIsMuted(false);
    } else {
      playerRef.current.mute();
      setIsMuted(true);
    }
  };

  const toggleFullscreen = () => {
    const iframe = document.getElementById('youtube-player');
    if (!iframe) return;
    
    if (iframe.requestFullscreen) {
      iframe.requestFullscreen();
    } else if (iframe.webkitRequestFullscreen) {
      iframe.webkitRequestFullscreen();
    } else if (iframe.mozRequestFullScreen) {
      iframe.mozRequestFullScreen();
    } else if (iframe.msRequestFullscreen) {
      iframe.msRequestFullscreen();
    }
  };

  return (
    <section className="video-trailer-section" ref={sectionRef}>
      <div className="video-trailer-container">
        <div className={`video-trailer-content ${isVisible ? 'trailer-animate-in' : ''}`}>
          
          {/* Header */}
          <div className="trailer-header">
            <div className="trailer-subtitle">–ì–ª–µ–¥–∞–π—Ç–µ —Å–µ–≥–∞</div>
            <h2 className="trailer-title">
              –û—Ñ–∏—Ü–∏–∞–ª–µ–Ω —Ç—Ä–µ–π–ª—ä—Ä –Ω–∞ <span className="book-title-accent">"–ü–µ–ø–µ–ª –æ—Ç –¥–µ—Ç—Å—Ç–≤–æ—Ç–æ"</span>
            </h2>
            <div className="title-underline">
              <div className="underline-dot"></div>
              <div className="underline-line"></div>
              <div className="underline-dot"></div>
            </div>
          </div>

          {/* Video Container */}
          <div 
            className="video-wrapper"
            onMouseEnter={() => setShowControls(true)}
            onMouseLeave={() => setShowControls(false)}
          >
            {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ */}
            <div className="video-frame-corners">
              <div className="corner corner-tl"></div>
              <div className="corner corner-tr"></div>
              <div className="corner corner-bl"></div>
              <div className="corner corner-br"></div>
            </div>

            {/* Glow –µ—Ñ–µ–∫—Ç–∏ */}
            <div className="video-glow-effect"></div>
            
            {/* –¢–í–û–Ø Thumbnail –ø—Ä–µ–¥–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ player */}
            {!shouldLoadPlayer && (
              <div className="video-thumbnail">
                <img 
                  src="/images/book/trailer-poster.png"
                  alt="–ü–µ–ø–µ–ª –æ—Ç –¥–µ—Ç—Å—Ç–≤–æ—Ç–æ —Ç—Ä–µ–π–ª—ä—Ä"
                  className="trailer-video"
                />
              </div>
            )}

            {/* YouTube Player - –∑–∞—Ä–µ–∂–¥–∞ —Å–µ –ø—Ä–∏ –ø—ä—Ä–≤–æ –∫–ª–∏–∫–≤–∞–Ω–µ */}
            {shouldLoadPlayer && (
              <div id="youtube-player" className="trailer-video"></div>
            )}

            {/* Play overlay –∫–æ–≥–∞—Ç–æ –≤–∏–¥–µ–æ—Ç–æ –Ω–µ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ */}
            {!isPlaying && (
              <div className="play-overlay" onClick={handlePlayClick}>
                <div className="play-button">
                  <div className="play-icon">‚ñ∂</div>
                  <div className="play-pulse"></div>
                </div>
                <p className="play-text">–ü—É—Å–Ω–∏ —Ç—Ä–µ–π–ª—ä—Ä–∞</p>
              </div>
            )}

            {/* Custom Controls - –ø–æ–∫–∞–∑–≤–∞—Ç —Å–µ —Å–∞–º–æ —Å–ª–µ–¥ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ player */}
            {shouldLoadPlayer && (
              <div className={`video-controls ${showControls || !isPlaying ? 'controls-visible' : ''}`}>
                <button 
                  className="control-btn play-pause-btn"
                  onClick={togglePlay}
                  aria-label={isPlaying ? '–ü–∞—É–∑–∞' : '–ü—É—Å–Ω–∏'}
                >
                  {isPlaying ? '‚è∏' : '‚ñ∂'}
                </button>

                <button 
                  className="control-btn mute-btn"
                  onClick={toggleMute}
                  aria-label={isMuted ? '–í–∫–ª—é—á–∏ –∑–≤—É–∫' : '–ò–∑–∫–ª—é—á–∏ –∑–≤—É–∫'}
                >
                  {isMuted ? 'üîá' : 'üîä'}
                </button>

                <button 
                  className="control-btn fullscreen-btn"
                  onClick={toggleFullscreen}
                  aria-label="–¶—è–ª –µ–∫—Ä–∞–Ω"
                >
                  ‚õ∂
                </button>
              </div>
            )}
          </div>

          {/* Call to action –ø–æ–¥ –≤–∏–¥–µ–æ—Ç–æ */}
          <div className="trailer-cta">
            <p className="cta-text">
              –í–¥—ä—Ö–Ω–æ–≤–µ–Ω–∏ –æ—Ç –∏—Å—Ç–æ—Ä–∏—è—Ç–∞? –ö–Ω–∏–≥–∞—Ç–∞ –≤–∏ –æ—á–∞–∫–≤–∞.
            </p>
            <button 
              className="cta-button"
              onClick={() => {
                const orderSection = document.getElementById('order-section');
                if (orderSection) {
                  orderSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
              }}
            >
              –ü–æ—Ä—ä—á–∞–π —Å–µ–≥–∞
            </button>
          </div>
        </div>
      </div>
    </section>
  );
};

export default VideoTrailerSection;