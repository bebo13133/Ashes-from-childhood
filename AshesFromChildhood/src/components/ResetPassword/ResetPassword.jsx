/* eslint-disable no-unused-vars */
import { useState, useEffect } from 'react';
import { useNavigate, useSearchParams, Link } from 'react-router-dom';
import './ResetPassword.css';
import { useAuthContext } from '../contexts/userContext';


const ResetPassword = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { resetPassword, isLoading, errorMessage, clearError } = useAuthContext();
  
  const [formData, setFormData] = useState({
    password: '',
    confirmPassword: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [validationErrors, setValidationErrors] = useState({});
  const [isSuccess, setIsSuccess] = useState(false);
  const [token, setToken] = useState('');

  useEffect(() => {
    const resetToken = searchParams.get('token');
    if (!resetToken) {
      navigate('/login-admin-sys', { replace: true });
      return;
    }
    setToken(resetToken);
  }, [searchParams, navigate]);

  useEffect(() => {
    clearError();
    setValidationErrors({});
  }, [formData, clearError]);

  const validateForm = () => {
    const errors = {};
    
    if (!formData.password.trim()) {
      errors.password = '–ü–∞—Ä–æ–ª–∞—Ç–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞';
    } else if (formData.password.length < 6) {
      errors.password = '–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞';
    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(formData.password)) {
      errors.password = '–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ –≥–ª–∞–≤–Ω–∞ –±—É–∫–≤–∞, –µ–¥–Ω–∞ –º–∞–ª–∫–∞ –±—É–∫–≤–∞ –∏ –µ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞';
    }
    
    if (!formData.confirmPassword.trim()) {
      errors.confirmPassword = '–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ—Ç–æ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ';
    } else if (formData.password !== formData.confirmPassword) {
      errors.confirmPassword = '–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç';
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    try {
      await resetPassword({
        token,
        password: formData.password,
        confirmPassword: formData.confirmPassword
      });
      
      setIsSuccess(true);
      
      // Redirect to login after 3 seconds
      setTimeout(() => {
        navigate('/login-admin-sys', { replace: true });
      }, 3000);
      
    } catch (error) {
      console.error('Password reset failed:', error);
    }
  };

  if (isSuccess) {
    return (
      <div className="ResetPassword-reset-container">
        <div className="ResetPassword-reset-background">
          <div className="ResetPassword-floating-shapes">
            <div className="ResetPassword-shape ResetPassword-shape-1"></div>
            <div className="ResetPassword-shape ResetPassword-shape-2"></div>
            <div className="ResetPassword-shape ResetPassword-shape-3"></div>
            <div className="ResetPassword-shape ResetPassword-shape-4"></div>
            <div className="ResetPassword-shape ResetPassword-shape-5"></div>
          </div>
        </div>

        <div className="ResetPassword-reset-content">
          <div className="ResetPassword-reset-card">
            <div className="ResetPassword-success-header">
              <div className="ResetPassword-success-avatar">
                <span className="ResetPassword-success-icon">‚úÖ</span>
              </div>
              <h1 className="ResetPassword-success-title">–ü–∞—Ä–æ–ª–∞—Ç–∞ –µ —Å–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</h1>
              <p className="ResetPassword-success-subtitle">
                –°–µ–≥–∞ –º–æ–∂–µ—Ç–µ –¥–∞ –≤–ª–µ–∑–µ—Ç–µ —Å –Ω–æ–≤–∞—Ç–∞ —Å–∏ –ø–∞—Ä–æ–ª–∞.
              </p>
            </div>

            <div className="ResetPassword-success-actions">
              <Link to="/login-admin-sys" className="ResetPassword-login-btn">
                <span className="ResetPassword-btn-icon">üîë</span>
                –í–ª–∏–∑–∞–Ω–µ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞
              </Link>
              <p className="ResetPassword-redirect-text">
                –©–µ –±—ä–¥–µ—Ç–µ –ø—Ä–µ–Ω–∞—Å–æ—á–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–ª–µ–¥ 3 —Å–µ–∫—É–Ω–¥–∏...
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="ResetPassword-reset-container">
      <div className="ResetPassword-reset-background">
        <div className="ResetPassword-floating-shapes">
          <div className="ResetPassword-shape ResetPassword-shape-1"></div>
          <div className="ResetPassword-shape ResetPassword-shape-2"></div>
          <div className="ResetPassword-shape ResetPassword-shape-3"></div>
          <div className="ResetPassword-shape ResetPassword-shape-4"></div>
          <div className="ResetPassword-shape ResetPassword-shape-5"></div>
        </div>
      </div>

      <div className="ResetPassword-reset-content">
        <div className="ResetPassword-reset-card">
          <div className="ResetPassword-reset-header">
            <div className="ResetPassword-reset-avatar">
              <span className="ResetPassword-avatar-icon">üîë</span>
            </div>
            <h1 className="ResetPassword-reset-title">–°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞</h1>
            <p className="ResetPassword-reset-subtitle">
              –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–∞—Ç–∞ —Å–∏ –ø–∞—Ä–æ–ª–∞
            </p>
          </div>

          <form onSubmit={handleSubmit} className="ResetPassword-reset-form">
            <div className="ResetPassword-form-group">
              <label htmlFor="password" className="ResetPassword-form-label">
                <span className="ResetPassword-label-icon">üîí</span>
                –ù–æ–≤–∞ –ø–∞—Ä–æ–ª–∞
              </label>
              <div className="ResetPassword-password-input-wrapper">
                <input
                  type={showPassword ? 'text' : 'password'}
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleInputChange}
                  className={`ResetPassword-form-input ${validationErrors.password ? 'ResetPassword-error' : ''}`}
                  placeholder="–í—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–∞ –ø–∞—Ä–æ–ª–∞"
                  disabled={isLoading}
                />
                <button
                  type="button"
                  className="ResetPassword-password-toggle"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={isLoading}
                >
                  {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                </button>
              </div>
              {validationErrors.password && (
                <span className="ResetPassword-error-message">{validationErrors.password}</span>
              )}
            </div>

            <div className="ResetPassword-form-group">
              <label htmlFor="confirmPassword" className="ResetPassword-form-label">
                <span className="ResetPassword-label-icon">üîê</span>
                –ü–æ—Ç–≤—ä—Ä–¥–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞
              </label>
              <div className="ResetPassword-password-input-wrapper">
                <input
                  type={showConfirmPassword ? 'text' : 'password'}
                  id="confirmPassword"
                  name="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={handleInputChange}
                  className={`ResetPassword-form-input ${validationErrors.confirmPassword ? 'ResetPassword-error' : ''}`}
                  placeholder="–ü–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ –Ω–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞"
                  disabled={isLoading}
                />
                <button
                  type="button"
                  className="ResetPassword-password-toggle"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  disabled={isLoading}
                >
                  {showConfirmPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                </button>
              </div>
              {validationErrors.confirmPassword && (
                <span className="ResetPassword-error-message">{validationErrors.confirmPassword}</span>
              )}
            </div>

            {errorMessage && (
              <div className="ResetPassword-global-error-message">
                <span className="ResetPassword-error-icon">‚ö†Ô∏è</span>
                {errorMessage}
              </div>
            )}

            <button
              type="submit"
              className="ResetPassword-reset-btn"
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <span className="ResetPassword-loading-spinner"></span>
                  –°–º–µ–Ω—è–Ω–µ...
                </>
              ) : (
                <>
                  <span className="ResetPassword-btn-icon">üîÑ</span>
                  –°–º–µ–Ω–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞
                </>
              )}
            </button>

            <div className="ResetPassword-auth-links">
              <Link to="/login-admin-sys" className="ResetPassword-login-link">
                ‚Üê –ù–∞–∑–∞–¥ –∫—ä–º –≤—Ö–æ–¥–∞
              </Link>
            </div>
          </form>
        </div>

        <div className="ResetPassword-reset-footer">
          <p>¬© 2024 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ ‚Ä¢ –ó–∞—â–∏—Ç–µ–Ω–æ –∏ —Å–∏–≥—É—Ä–Ω–æ</p>
        </div>
      </div>
    </div>
  );
};

export default ResetPassword;