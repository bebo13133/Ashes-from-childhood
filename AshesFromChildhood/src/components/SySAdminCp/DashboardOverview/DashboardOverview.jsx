/* eslint-disable no-unused-vars */
import { useState, useEffect } from 'react';
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  LineChart, Line, PieChart, Pie, Cell, AreaChart, Area 
} from 'recharts';
import './DashboardOverview.css';
import { useAuthContext } from '../../contexts/userContext';

const DashboardOverview = () => {
  const { fetchDashboardData, dashboardData } = useAuthContext();
  const [isLoading, setIsLoading] = useState(true);
  const [timeframe, setTimeframe] = useState('30d');

  // Mock data –∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è - –∑–∞–º–µ–Ω–µ—Ç–µ —Å —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏
  const [stats, setStats] = useState({
    totalOrders: 247,
    pendingOrders: 34,
    completedOrders: 189,
    cancelledOrders: 24,
    totalRevenue: 6175, // 247 * 25 –ª–≤
    averageRating: 4.7,
    totalReviews: 89,
    uniqueVisitors: 3456,
    todayVisitors: 127
  });

  const monthlyData = [
    { name: '–Ø–Ω—É', orders: 45, revenue: 1125, visitors: 890 },
    { name: '–§–µ–≤', orders: 52, revenue: 1300, visitors: 1120 },
    { name: '–ú–∞—Ä', orders: 48, revenue: 1200, visitors: 980 },
    { name: '–ê–ø—Ä', orders: 61, revenue: 1525, visitors: 1340 },
    { name: '–ú–∞–π', orders: 55, revenue: 1375, visitors: 1180 },
    { name: '–Æ–Ω–∏', orders: 67, revenue: 1675, visitors: 1520 },
    { name: '–Æ–ª–∏', orders: 71, revenue: 1775, visitors: 1680 },
    { name: '–ê–≤–≥', orders: 69, revenue: 1725, visitors: 1590 },
    { name: '–°–µ–ø', orders: 58, revenue: 1450, visitors: 1290 },
    { name: '–û–∫—Ç', orders: 63, revenue: 1575, visitors: 1420 },
    { name: '–ù–æ–µ', orders: 72, revenue: 1800, visitors: 1750 },
    { name: '–î–µ–∫', orders: 78, revenue: 1950, visitors: 1890 }
  ];

  const orderStatusData = [
    { name: '–ó–∞–≤—ä—Ä—à–µ–Ω–∏', value: stats.completedOrders, color: '#10b981' },
    { name: '–í –æ–±—Ä–∞–±–æ—Ç–∫–∞', value: stats.pendingOrders, color: '#f59e0b' },
    { name: '–û—Ç–∫–∞–∑–∞–Ω–∏', value: stats.cancelledOrders, color: '#ef4444' }
  ];

  const recentActivity = [
    { type: 'order', message: '–ù–æ–≤–∞ –ø–æ—Ä—ä—á–∫–∞ –æ—Ç –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', time: '5 –º–∏–Ω', status: 'pending' },
    { type: 'review', message: '–ù–æ–≤ –æ—Ç–∑–∏–≤ —Å –æ—Ü–µ–Ω–∫–∞ 5 –∑–≤–µ–∑–¥–∏', time: '12 –º–∏–Ω', status: 'pending' },
    { type: 'order', message: '–ü–æ—Ä—ä—á–∫–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', time: '23 –º–∏–Ω', status: 'completed' },
    { type: 'email', message: '–ò–∑–ø—Ä–∞—Ç–µ–Ω –∏–º–µ–π–ª –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ', time: '45 –º–∏–Ω', status: 'sent' },
    { type: 'review', message: '–û—Ç–∑–∏–≤ –æ–¥–æ–±—Ä–µ–Ω –∏ –ø—É–±–ª–∏–∫—É–≤–∞–Ω', time: '1 —á–∞—Å', status: 'approved' }
  ];

  useEffect(() => {
    loadDashboardData();
  }, [timeframe]);

  const loadDashboardData = async () => {
    setIsLoading(true);
    try {
      // –í —Ä–µ–∞–ª–Ω–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
      // const data = await fetchDashboardData();
      // setStats(data);
      
      // –°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
      await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getActivityIcon = (type) => {
    switch (type) {
      case 'order': return 'üì¶';
      case 'review': return '‚≠ê';
      case 'email': return 'üìß';
      default: return 'üìä';
    }
  };

  const getActivityColor = (status) => {
    switch (status) {
      case 'pending': return '#f59e0b';
      case 'completed': return '#10b981';
      case 'sent': return '#6366f1';
      case 'approved': return '#10b981';
      default: return '#6b7280';
    }
  };

  if (isLoading) {
    return (
      <div className="dashboard-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
      </div>
    );
  }

  return (
    <div className="dashboard-overview">
      {/* Header */}
      <div className="dashboard-header">
        <div className="header-info">
          <h2 className="dashboard-title">–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞</h2>
          <p className="dashboard-subtitle">
            –ü–æ—Å–ª–µ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleString('bg-BG')}
          </p>
        </div>
        
        <div className="timeframe-selector">
          <label htmlFor="timeframe">–ü–µ—Ä–∏–æ–¥:</label>
          <select 
            id="timeframe"
            value={timeframe} 
            onChange={(e) => setTimeframe(e.target.value)}
            className="timeframe-select"
          >
            <option value="1d">–î–Ω–µ—Å</option>
            <option value="7d">–ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 7 –¥–Ω–∏</option>
            <option value="30d">–ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 30 –¥–Ω–∏</option>
            <option value="1y">–¢–∞–∑–∏ –≥–æ–¥–∏–Ω–∞</option>
          </select>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="stats-grid">
        <div className="stat-card orders-card">
          <div className="stat-icon">üì¶</div>
          <div className="stat-content">
            <h3 className="stat-title">–û–±—â–æ –ø–æ—Ä—ä—á–∫–∏</h3>
            <p className="stat-number">{stats.totalOrders}</p>
            <span className="stat-change positive">+12% –æ—Ç –º–∏–Ω–∞–ª–∏—è –º–µ—Å–µ—Ü</span>
          </div>
        </div>

        <div className="stat-card revenue-card">
          <div className="stat-icon">üí∞</div>
          <div className="stat-content">
            <h3 className="stat-title">–û–±—â–∏ –ø—Ä–∏—Ö–æ–¥–∏</h3>
            <p className="stat-number">{stats.totalRevenue.toLocaleString()} –ª–≤</p>
            <span className="stat-change positive">+8% –æ—Ç –º–∏–Ω–∞–ª–∏—è –º–µ—Å–µ—Ü</span>
          </div>
        </div>

        <div className="stat-card rating-card">
          <div className="stat-icon">‚≠ê</div>
          <div className="stat-content">
            <h3 className="stat-title">–°—Ä–µ–¥–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥</h3>
            <p className="stat-number">{stats.averageRating}/5</p>
            <span className="stat-change neutral">{stats.totalReviews} –æ—Ç–∑–∏–≤–∞</span>
          </div>
        </div>

        <div className="stat-card visitors-card">
          <div className="stat-icon">üë•</div>
          <div className="stat-content">
            <h3 className="stat-title">–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –¥–Ω–µ—Å</h3>
            <p className="stat-number">{stats.todayVisitors}</p>
            <span className="stat-change positive">+15% –æ—Ç –≤—á–µ—Ä–∞</span>
          </div>
        </div>
      </div>

      {/* Charts Section */}
      <div className="charts-section">
        {/* Monthly Overview */}
        <div className="chart-card monthly-chart">
          <div className="chart-header">
            <h3 className="chart-title">–ú–µ—Å–µ—á–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h3>
            <div className="chart-legend">
              <span className="legend-item orders">–ü–æ—Ä—ä—á–∫–∏</span>
              <span className="legend-item revenue">–ü—Ä–∏—Ö–æ–¥–∏</span>
            </div>
          </div>
          <div className="chart-container">
            <ResponsiveContainer width="100%" height={300}>
              <AreaChart data={monthlyData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                <XAxis dataKey="name" stroke="#6b7280" />
                <YAxis stroke="#6b7280" />
                <Tooltip 
                  contentStyle={{
                    backgroundColor: '#f9fafb',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px'
                  }}
                />
                <Area 
                  type="monotone" 
                  dataKey="orders" 
                  stackId="1"
                  stroke="#667eea" 
                  fill="#667eea"
                  fillOpacity={0.3}
                />
                <Area 
                  type="monotone" 
                  dataKey="revenue" 
                  stackId="2"
                  stroke="#764ba2" 
                  fill="#764ba2"
                  fillOpacity={0.3}
                />
              </AreaChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Order Status Distribution */}
        <div className="chart-card status-chart">
          <div className="chart-header">
            <h3 className="chart-title">–°—Ç–∞—Ç—É—Å –Ω–∞ –ø–æ—Ä—ä—á–∫–∏—Ç–µ</h3>
          </div>
          <div className="chart-container">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={orderStatusData}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={100}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {orderStatusData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
            <div className="pie-legend">
              {orderStatusData.map((item, index) => (
                <div key={index} className="pie-legend-item">
                  <div 
                    className="legend-color" 
                    style={{ backgroundColor: item.color }}
                  ></div>
                  <span className="legend-text">{item.name}: {item.value}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="activity-section">
        <div className="activity-header">
          <h3 className="activity-title">–ü–æ—Å–ª–µ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç</h3>
          <button className="view-all-btn">–í–∏–∂ –≤—Å–∏—á–∫–∏</button>
        </div>
        <div className="activity-list">
          {recentActivity.map((activity, index) => (
            <div key={index} className="activity-item">
              <div className="activity-icon" style={{ color: getActivityColor(activity.status) }}>
                {getActivityIcon(activity.type)}
              </div>
              <div className="activity-content">
                <p className="activity-message">{activity.message}</p>
                <span className="activity-time">{activity.time}</span>
              </div>
              <div 
                className="activity-status"
                style={{ backgroundColor: getActivityColor(activity.status) }}
              ></div>
            </div>
          ))}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="quick-actions">
        <h3 className="actions-title">–ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        <div className="actions-grid">
          <button className="action-btn">
            <span className="action-icon">üì¶</span>
            <span className="action-text">–ù–æ–≤–∞ –ø–æ—Ä—ä—á–∫–∞</span>
          </button>
          <button className="action-btn">
            <span className="action-icon">üìß</span>
            <span className="action-text">–ò–∑–ø—Ä–∞—Ç–∏ –∏–º–µ–π–ª</span>
          </button>
          <button className="action-btn">
            <span className="action-icon">üìä</span>
            <span className="action-text">–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –æ—Ç—á–µ—Ç</span>
          </button>
          <button className="action-btn">
            <span className="action-icon">‚öôÔ∏è</span>
            <span className="action-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default DashboardOverview;