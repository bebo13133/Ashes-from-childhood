import { useState, useEffect } from 'react';
import './EmailManager.css';
import { useAuthContext } from '../../contexts/userContext';
import { populateOrderTemplate } from '../../../utils/emailTemplates';

const EmailManager = () => {
    const { sendEmailToCustomer, isLoading, selectedOrder, getEmailTemplates, updateEmailTemplate, createEmailTemplate, deleteEmailTemplate } =
        useAuthContext();

    const [activeTab, setActiveTab] = useState('send');
    const [emailData, setEmailData] = useState({
        to: '',
        subject: '',
        message: '',
    });

    // Template management state - for backend templates
    const [templates, setTemplates] = useState([]);
    const [editingTemplate, setEditingTemplate] = useState(null);
    const [templateForm, setTemplateForm] = useState({
        name: '',
        subject: '',
        content: '',
    });

    // Load backend templates for the templates menu
    useEffect(() => {
        const loadTemplates = async () => {
            try {
                const backendTemplates = await getEmailTemplates();
                setTemplates(backendTemplates);
            } catch (error) {
                console.error('Error loading backend templates:', error);
                setTemplates([]);
            }
        };

        loadTemplates();
    }, [getEmailTemplates]);

    // Auto-populate when selectedOrder changes (using frontend template)
    useEffect(() => {
        if (selectedOrder) {
            const populated = populateOrderTemplate(selectedOrder);
            setEmailData(populated);
        }
    }, [selectedOrder]);

    const handleSingleEmailSubmit = async (e) => {
        e.preventDefault();
        try {
            await sendEmailToCustomer(emailData);
            setEmailData({ to: '', subject: '', message: '' });
            alert('–ò–º–µ–π–ª—ä—Ç –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            console.error('Error sending email:', error);
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∞!');
        }
    };

    // Template management functions (for backend templates)
    const startEditingTemplate = (template) => {
        setEditingTemplate(template);
        setTemplateForm({
            name: template.name,
            subject: template.subject,
            content: template.content,
        });
    };

    const cancelEditingTemplate = () => {
        setEditingTemplate(null);
        setTemplateForm({ name: '', subject: '', content: '' });
    };

    const saveTemplate = async () => {
        try {
            let savedTemplate;

            if (editingTemplate.isNew) {
                // Create new template
                savedTemplate = await createEmailTemplate({
                    name: templateForm.name,
                    subject: templateForm.subject,
                    content: templateForm.content,
                });

                // Add the new template to the list
                setTemplates((prev) => [...prev, savedTemplate]);
            } else {
                // Update existing template
                savedTemplate = await updateEmailTemplate(editingTemplate.id, {
                    name: templateForm.name,
                    subject: templateForm.subject,
                    content: templateForm.content,
                });

                // Update the template in the list
                setTemplates((prev) => prev.map((t) => (t.id === editingTemplate.id ? savedTemplate : t)));
            }

            cancelEditingTemplate();
        } catch (error) {
            console.error('Error saving template:', error);
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —à–∞–±–ª–æ–Ω–∞!');
        }
    };

    const handleTemplateSelect = (templateId) => {
        const template = templates.find((t) => t.id === templateId);
        if (template) {
            setEmailData((prev) => ({
                ...prev,
                subject: template.subject,
                message: template.content,
            }));
        }
    };

    const handleAddNewTemplate = () => {
        const newTemplate = {
            name: '–ù–æ–≤ —à–∞–±–ª–æ–Ω',
            subject: '–ù–æ–≤–∞ —Ç–µ–º–∞',
            content: '–í—ä–≤–µ–¥–µ—Ç–µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ —à–∞–±–ª–æ–Ω–∞ —Ç—É–∫...',
            isNew: true,
        };

        setEditingTemplate(newTemplate);
        setTemplateForm({
            name: newTemplate.name,
            subject: newTemplate.subject,
            content: newTemplate.content,
        });
    };

    const deleteTemplate = async (templateId) => {
        if (window.confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–æ–∑–∏ —à–∞–±–ª–æ–Ω?')) {
            try {
                await deleteEmailTemplate(templateId);
                setTemplates((prev) => prev.filter((t) => t.id !== templateId));
                // Removed the success alert
            } catch (error) {
                console.error('Error deleting template:', error);
                alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —à–∞–±–ª–æ–Ω–∞!');
            }
        }
    };

    return (
        <div className='email-manager-container'>
            {/* Header */}
            <div className='email-manager-header'>
                <div className='email-manager-header-info'>
                    <h2 className='email-manager-title'>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∏–º–µ–π–ª–∏</h2>
                    <p className='email-manager-subtitle'>–ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∏ –¥–æ –∫–ª–∏–µ–Ω—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —à–∞–±–ª–æ–Ω–∏</p>
                </div>
            </div>

            {/* Main Content Tabs */}
            <div className='email-manager-tabs'>
                <div className='email-manager-tab-nav'>
                    <button
                        className={`email-manager-tab-btn ${activeTab === 'send' ? 'email-manager-tab-btn--active' : ''}`}
                        onClick={() => setActiveTab('send')}
                    >
                        üìß –ï–¥–∏–Ω–∏—á–µ–Ω –∏–º–µ–π–ª
                    </button>
                    <button
                        className={`email-manager-tab-btn ${activeTab === 'templates' ? 'email-manager-tab-btn--active' : ''}`}
                        onClick={() => setActiveTab('templates')}
                    >
                        üìù –®–∞–±–ª–æ–Ω–∏
                    </button>
                </div>

                <div className='email-manager-tab-content'>
                    {/* Single Email Tab */}
                    {activeTab === 'send' && (
                        <div className='email-manager-single-email'>
                            <div className='email-manager-form-section'>
                                <h3>–ò–∑–ø—Ä–∞—Ç–∏ –∏–º–µ–π–ª –¥–æ –∫–ª–∏–µ–Ω—Ç</h3>
                                <p className='email-manager-form-desc'>
                                    –ò–∑–ø—Ä–∞—Ç–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω –∏–º–µ–π–ª –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∫–ª–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç –∑–∞ –æ—Ç–∑–∏–≤ –∏ –¥—Ä.)
                                </p>

                                <form onSubmit={handleSingleEmailSubmit} className='email-manager-email-form'>
                                    <div className='email-manager-form-group'>
                                        <label>–î–æ (–∏–º–µ–π–ª –∞–¥—Ä–µ—Å):</label>
                                        <input
                                            type='email'
                                            value={emailData.to}
                                            onChange={(e) => setEmailData((prev) => ({ ...prev, to: e.target.value }))}
                                            placeholder='customer@example.com'
                                            required
                                        />
                                    </div>

                                    <div className='email-manager-form-group'>
                                        <label>–¢–µ–º–∞:</label>
                                        <input
                                            type='text'
                                            value={emailData.subject}
                                            onChange={(e) => setEmailData((prev) => ({ ...prev, subject: e.target.value }))}
                                            placeholder='–¢–µ–º–∞ –Ω–∞ –∏–º–µ–π–ª–∞...'
                                            required
                                        />
                                    </div>

                                    <div className='email-manager-form-group'>
                                        <label>–°—ä–æ–±—â–µ–Ω–∏–µ:</label>
                                        <textarea
                                            rows={12}
                                            value={emailData.message}
                                            onChange={(e) => setEmailData((prev) => ({ ...prev, message: e.target.value }))}
                                            placeholder='–í—ä–≤–µ–¥–µ—Ç–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ...'
                                            required
                                        />
                                    </div>

                                    <button
                                        type='submit'
                                        className={`email-manager-submit-btn ${isLoading ? 'email-manager-submit-btn--loading' : ''}`}
                                        disabled={isLoading}
                                    >
                                        {isLoading ? '–ò–∑–ø—Ä–∞—â–∞–Ω–µ...' : 'üìß –ò–∑–ø—Ä–∞—Ç–∏ –∏–º–µ–π–ª'}
                                    </button>
                                </form>
                            </div>

                            <div className='email-manager-templates-sidebar'>
                                <h4>–ì–æ—Ç–æ–≤–∏ —à–∞–±–ª–æ–Ω–∏</h4>
                                <p className='email-manager-sidebar-desc'>–ö–ª–∏–∫–Ω–µ—Ç–µ –≤—ä—Ä—Ö—É —à–∞–±–ª–æ–Ω, –∑–∞ –¥–∞ –≥–æ –∑–∞—Ä–µ–¥–∏—Ç–µ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç–∞</p>
                                <div className='email-manager-template-list'>
                                    {templates.map((template) => (
                                        <div key={template.id} className='email-manager-template-item' onClick={() => handleTemplateSelect(template.id)}>
                                            <h5>{template.name}</h5>
                                            <p>{template.subject}</p>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Templates Tab */}
                    {activeTab === 'templates' && (
                        <div className='email-manager-templates'>
                            <div className='email-manager-templates-header'>
                                <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —à–∞–±–ª–æ–Ω–∏</h3>
                                <p className='email-manager-templates-desc'>
                                    –£–ø—Ä–∞–≤–ª—è–≤–∞–π—Ç–µ —à–∞–±–ª–æ–Ω–∏—Ç–µ –∑–∞ –∏–º–µ–π–ª–∏. –ü—Ä–æ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–∏—è—Ç —à–∞–±–ª–æ–Ω —Å–µ –ø–æ–ø—ä–ª–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å –¥–∞–Ω–Ω–∏, –∞ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –º–æ–∂–µ—Ç–µ –¥–∞ —Å—ä–∑–¥–∞–¥–µ—Ç–µ
                                    —Å–ø–æ—Ä–µ–¥ –Ω—É–∂–¥–∏—Ç–µ —Å–∏.
                                </p>
                            </div>

                            {editingTemplate ? (
                                // Template Editor
                                <div className='email-manager-template-editor'>
                                    <div className='email-manager-editor-header'>
                                        <h4>{editingTemplate.isNew ? '–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ —à–∞–±–ª–æ–Ω' : `–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —à–∞–±–ª–æ–Ω: ${editingTemplate.name}`}</h4>
                                        <div className='email-manager-editor-actions'>
                                            <button className='email-manager-save-btn' onClick={saveTemplate}>
                                                üíæ –ó–∞–ø–∞–∑–∏
                                            </button>
                                            <button className='email-manager-cancel-btn' onClick={cancelEditingTemplate}>
                                                ‚ùå –û—Ç–∫–∞–∑
                                            </button>
                                        </div>
                                    </div>

                                    <div className='email-manager-editor-content'>
                                        <div className='email-manager-form-group'>
                                            <label>–ò–º–µ –Ω–∞ —à–∞–±–ª–æ–Ω–∞:</label>
                                            <input
                                                type='text'
                                                value={templateForm.name}
                                                onChange={(e) => setTemplateForm((prev) => ({ ...prev, name: e.target.value }))}
                                                placeholder='–ò–º–µ –Ω–∞ —à–∞–±–ª–æ–Ω–∞...'
                                            />
                                        </div>

                                        <div className='email-manager-form-group'>
                                            <label>–¢–µ–º–∞ –Ω–∞ –∏–º–µ–π–ª–∞:</label>
                                            <input
                                                type='text'
                                                value={templateForm.subject}
                                                onChange={(e) => setTemplateForm((prev) => ({ ...prev, subject: e.target.value }))}
                                                placeholder='–¢–µ–º–∞ –Ω–∞ –∏–º–µ–π–ª–∞...'
                                            />
                                        </div>

                                        <div className='email-manager-form-group'>
                                            <label>–°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –∏–º–µ–π–ª–∞:</label>
                                            <textarea
                                                name='content'
                                                rows={15}
                                                value={templateForm.content}
                                                onChange={(e) => setTemplateForm((prev) => ({ ...prev, content: e.target.value }))}
                                                placeholder='–°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –∏–º–µ–π–ª–∞...'
                                            />
                                        </div>
                                    </div>
                                </div>
                            ) : (
                                // Template List
                                <div className='email-manager-templates-grid'>
                                    {templates.map((template) => (
                                        <div key={template.id} className='email-manager-template-card'>
                                            <div className='email-manager-template-header'>
                                                <h4>{template.name}</h4>
                                            </div>
                                            <div className='email-manager-template-content'>
                                                <p className='email-manager-template-subject'>
                                                    <strong>–¢–µ–º–∞:</strong> {template.subject}
                                                </p>
                                                <div className='email-manager-template-preview'>
                                                    <strong>–°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ:</strong>
                                                    <pre>{template.content.substring(0, 200)}...</pre>
                                                </div>

                                                {/* Info note for promo template only */}
                                                {template.name === '–ü—Ä–æ–º–æ—Ü–∏–æ–Ω–∞–ª–µ–Ω –∏–º–µ–π–ª' && (
                                                    <div className='email-manager-template-warning'>
                                                        <div className='email-manager-warning-icon'>‚ÑπÔ∏è</div>
                                                        <div className='email-manager-warning-text'>
                                                            <strong>–ê–∫—Ç—É–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏:</strong> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –≤ —Ç–æ–∑–∏ —à–∞–±–ª–æ–Ω —Å–µ –∑–∞—Ä–µ–∂–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞ —Å
                                                            –Ω–∞–π-–∞–∫—Ç—É–∞–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ (—Ä–µ–π—Ç–∏–Ω–≥, –±—Ä–æ–π –ø–æ—Ä—ä—á–∫–∏, —Ü–µ–Ω–∞).
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                            <div className='email-manager-template-footer'>
                                                <button
                                                    className='email-manager-use-template-btn'
                                                    onClick={() => {
                                                        setActiveTab('send');
                                                        handleTemplateSelect(template.id);
                                                    }}
                                                >
                                                    üìß –ò–∑–ø–æ–ª–∑–≤–∞–π
                                                </button>
                                                <button className='email-manager-edit-template-btn' onClick={() => startEditingTemplate(template)}>
                                                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–∞–π
                                                </button>
                                                <button
                                                    className='email-manager-delete-template-btn'
                                                    onClick={() => deleteTemplate(template.id)}
                                                    title='–ò–∑—Ç—Ä–∏–π —à–∞–±–ª–æ–Ω'
                                                >
                                                    üóëÔ∏è –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ
                                                </button>
                                            </div>
                                        </div>
                                    ))}
                                    {Array.from({ length: 3 - templates.length }, (_, index) => (
                                        <div
                                            key={`add-${index}`}
                                            className='email-manager-template-card email-manager-template-card--add'
                                            onClick={handleAddNewTemplate}
                                        >
                                            <div className='email-manager-template-content'>
                                                <div className='email-manager-add-template-info'>
                                                    <h4>–î–æ–±–∞–≤–∏ –Ω–æ–≤ —à–∞–±–ª–æ–Ω</h4>
                                                    <p>–°—ä–∑–¥–∞–π—Ç–µ –Ω–æ–≤ —à–∞–±–ª–æ–Ω –∑–∞ –∏–º–µ–π–ª–∏ —Å–ø–æ—Ä–µ–¥ –Ω—É–∂–¥–∏—Ç–µ —Å–∏</p>
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default EmailManager;
