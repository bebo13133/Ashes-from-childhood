/* eslint-disable no-unused-vars */
import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import './sySAdminCp.css';
import { useAuthContext } from '../contexts/userContext';
import DashboardOverview from './DashboardOverview/DashboardOverview';
import OrdersManagement from './OrdersManagement/OrdersManagement';
import VisitorsStats from './VisitorsStats/VisitorsStats';
import RatingsReviews from './RatingsReviews/RatingsReviews';
import EmailManager from './EmailManager/EmailManager';
import Reports from './Reports/Reports';
import NotificationDropdown from './NotificationDropdown/NotificationDropdown';

const SySAdminCp = () => {
    const navigate = useNavigate();
    const {
        isAuthenticated,
        adminName,
        adminEmail,
        onLogout,
        notifications,
        markNotificationAsRead,
        markAllNotificationsAsRead,
        changePassword
    } = useAuthContext();

    const [activeSection, setActiveSection] = useState('dashboard');
    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [showProfileDropdown, setShowProfileDropdown] = useState(false);
    const [showPasswordModal, setShowPasswordModal] = useState(false);
    
    const profileDropdownRef = useRef(null);

    // Redirect if not authenticated
    //   useEffect(() => {
    //     if (!isAuthenticated) {
    //       navigate('/login-admin-sys', { replace: true });
    //     }
    //   }, [isAuthenticated, navigate]);

    // Close dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (profileDropdownRef.current && !profileDropdownRef.current.contains(event.target)) {
                setShowProfileDropdown(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    const handleLogout = async () => {
        try {
            await onLogout();
            navigate('/login-admin-sys', { replace: true });
        } catch (error) {
            console.error('Logout error:', error);
        }
    };

    const handleNotificationClick = (notification) => {
        // Navigate to relevant section based on notification type
        switch (notification.type) {
            case 'order':
                setActiveSection('orders');
                break;
            case 'review':
                setActiveSection('ratings');
                break;
            default:
                setActiveSection('dashboard');
                break;
        }
    };

    const handlePasswordChange = () => {
        setShowProfileDropdown(false);
        setShowPasswordModal(true);
    };

    const menuItems = [
        {
            id: 'dashboard',
            title: '–¢–∞–±–ª–æ',
            icon: 'üìä',
            description: '–û–±—â –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ'
        },
        {
            id: 'orders',
            title: '–ü–æ—Ä—ä—á–∫–∏',
            icon: 'üì¶',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∏'
        },
        {
            id: 'visitors',
            title: '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏',
            icon: 'üë•',
            description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏'
        },
        {
            id: 'ratings',
            title: '–†–µ–π—Ç–∏–Ω–≥–∏',
            icon: '‚≠ê',
            description: '–û—Ç–∑–∏–≤–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏'
        },
        {
            id: 'email',
            title: '–ò–º–µ–π–ª–∏',
            icon: 'üìß',
            description: '–ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∏'
        },
        {
            id: 'reports',
            title: '–û—Ç—á–µ—Ç–∏',
            icon: 'üìà',
            description: '–î–µ—Ç–∞–π–ª–Ω–∏ –æ—Ç—á–µ—Ç–∏'
        }
    ];

    const renderActiveSection = () => {
        switch (activeSection) {
            case 'dashboard':
                return <DashboardOverview />;
            case 'orders':
                return <OrdersManagement />;
            case 'visitors':
                return <VisitorsStats />;
            case 'ratings':
                return <RatingsReviews />;
            case 'email':
                return <EmailManager />;
            case 'reports':
                return <Reports />;
            default:
                return <div className="section-placeholder">–°–µ–∫—Ü–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞</div>;
        }
    };

    return (
        <div className="admin-panel">
            {/* Sidebar */}
            <aside className={`admin-sidebar ${sidebarCollapsed ? 'collapsed' : ''}`}>
                <div className="sidebar-header">
                    <div className="admin-logo">
                        {/* <div className="logo-icon">üëë</div> */}
                        {!sidebarCollapsed && <span className="logo-text">Admin Panel</span>}
                    </div>
                    <button
                        className="sidebar-toggle"
                        onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                    >
                        {sidebarCollapsed ? '‚Üí' : '‚Üê'}
                    </button>
                </div>

                <nav className="sidebar-nav">
                    <ul className="nav-list">
                        {menuItems.map((item) => (
                            <li key={item.id} className="nav-item">
                                <button
                                    className={`nav-link ${activeSection === item.id ? 'active' : ''}`}
                                    onClick={() => setActiveSection(item.id)}
                                    title={sidebarCollapsed ? item.title : ''}
                                >
                                    <span className="nav-icon">{item.icon}</span>
                                    {!sidebarCollapsed && (
                                        <div className="nav-content">
                                            <span className="nav-title">{item.title}</span>
                                            <span className="nav-description">{item.description}</span>
                                        </div>
                                    )}
                                </button>
                            </li>
                        ))}
                    </ul>
                </nav>

                <div className="sidebar-footer">
                    {!sidebarCollapsed && (
                        <div className="admin-info">
                            <div className="admin-avatar-small">
                                <span className="avatar-text">{adminName?.charAt(0) || 'A'}</span>
                            </div>
                            <div className="admin-details">
                                <span className="admin-name">{adminName || 'Admin'}</span>
                                <span className="admin-role">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
                            </div>
                        </div>
                    )}
                </div>
            </aside>

            {/* Main Content */}
            <main className="admin-main">
                {/* Header */}
                <header className="admin-header">
                    <div className="header-left">
                        <h1 className="page-title">
                            {menuItems.find(item => item.id === activeSection)?.title || '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª'}
                        </h1>
                        <p className="page-subtitle">
                            {menuItems.find(item => item.id === activeSection)?.description || ''}
                        </p>
                    </div>

                    <div className="header-right">
                        <div className="header-actions">
                            <NotificationDropdown 
                                notifications={notifications}
                                onMarkAsRead={markNotificationAsRead}
                                onMarkAllAsRead={markAllNotificationsAsRead}
                                onNotificationClick={handleNotificationClick}
                            />

                            <div className="admin-profile-wrapper" ref={profileDropdownRef}>
                                <div 
                                    className="admin-profile"
                                    onClick={() => setShowProfileDropdown(!showProfileDropdown)}
                                >
                                    <div className="profile-info">
                                        <span className="profile-name">{adminName || 'Admin'}</span>
                                        <span className="profile-email">{adminEmail}</span>
                                    </div>
                                    <div className="profile-avatar">
                                        <span className="avatar-text">{adminName?.charAt(0) || 'A'}</span>
                                    </div>
                                    <button className="profile-dropdown">‚ñº</button>
                                </div>

                                {/* Profile Dropdown Menu */}
                                {showProfileDropdown && (
                                    <div className="profile-dropdown-menu">
                                        <div className="profile-dropdown-header">
                                            <div className="dropdown-avatar">
                                                <span className="avatar-text">{adminName?.charAt(0) || 'A'}</span>
                                            </div>
                                            <div className="dropdown-info">
                                                <span className="dropdown-name">{adminName || 'Admin'}</span>
                                                <span className="dropdown-email">{adminEmail}</span>
                                            </div>
                                        </div>

                                        <div className="profile-dropdown-divider"></div>

                                        <div className="profile-dropdown-items">
                                            <button 
                                                className="profile-dropdown-item"
                                                onClick={handlePasswordChange}
                                            >
                                                <span className="dropdown-item-icon">üîë</span>
                                                <span className="dropdown-item-text">–°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞</span>
                                            </button>
                                            
                                            <button 
                                                className="profile-dropdown-item logout-item"
                                                onClick={handleLogout}
                                            >
                                                <span className="dropdown-item-icon">üö™</span>
                                                <span className="dropdown-item-text">–ò–∑—Ö–æ–¥</span>
                                            </button>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </header>

                {/* Content Area */}
                <div className="admin-content">
                    <div className="content-wrapper">
                        {isLoading ? (
                            <div className="loading-screen">
                                <div className="loading-spinner"></div>
                                <p>–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...</p>
                            </div>
                        ) : (
                            renderActiveSection()
                        )}
                    </div>
                </div>
            </main>

            {/* Password Change Modal */}
            {showPasswordModal && (
                <PasswordChangeModal 
                    onClose={() => setShowPasswordModal(false)}
                    changePassword={changePassword}
                />
            )}
        </div>
    );
};

// Password Change Modal Component
const PasswordChangeModal = ({ onClose, changePassword }) => {
    const [passwordData, setPasswordData] = useState({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
    });
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [showPasswords, setShowPasswords] = useState({
        current: false,
        new: false,
        confirm: false
    });

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        // Validation
        if (!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword) {
            setError('–í—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏');
            return;
        }

        if (passwordData.newPassword !== passwordData.confirmPassword) {
            setError('–ù–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç');
            return;
        }

        if (passwordData.newPassword.length < 6) {
            setError('–ù–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞');
            return;
        }

        if (passwordData.currentPassword === passwordData.newPassword) {
            setError('–ù–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ —Ä–∞–∑–ª–∏—á–∞–≤–∞ –æ—Ç —Ç–µ–∫—É—â–∞—Ç–∞');
            return;
        }

        setIsLoading(true);

        try {
            await changePassword({
                currentPassword: passwordData.currentPassword,
                newPassword: passwordData.newPassword
            });
            
            alert('–ü–∞—Ä–æ–ª–∞—Ç–∞ –µ —Å–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            onClose();
        } catch (error) {
            setError(error.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞');
        } finally {
            setIsLoading(false);
        }
    };

    const togglePasswordVisibility = (field) => {
        setShowPasswords(prev => ({
            ...prev,
            [field]: !prev[field]
        }));
    };

    return (
        <div className="password-modal-overlay">
            <div className="password-modal">
                <div className="password-modal-header">
                    <h3>–°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞</h3>
                    <button 
                        className="password-modal-close"
                        onClick={onClose}
                        disabled={isLoading}
                    >
                        √ó
                    </button>
                </div>

                <form onSubmit={handleSubmit} className="password-form">
                    {error && (
                        <div className="password-error">
                            <span className="error-icon">‚ö†Ô∏è</span>
                            <span className="error-text">{error}</span>
                        </div>
                    )}

                    <div className="password-form-group">
                        <label>–¢–µ–∫—É—â–∞ –ø–∞—Ä–æ–ª–∞:</label>
                        <div className="password-input-wrapper">
                            <input
                                type={showPasswords.current ? "text" : "password"}
                                value={passwordData.currentPassword}
                                onChange={(e) => setPasswordData(prev => ({ 
                                    ...prev, 
                                    currentPassword: e.target.value 
                                }))}
                                placeholder="–í—ä–≤–µ–¥–µ—Ç–µ —Ç–µ–∫—É—â–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞"
                                disabled={isLoading}
                                required
                            />
                            <button
                                type="button"
                                className="password-toggle"
                                onClick={() => togglePasswordVisibility('current')}
                                disabled={isLoading}
                            >
                                {showPasswords.current ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                            </button>
                        </div>
                    </div>

                    <div className="password-form-group">
                        <label>–ù–æ–≤–∞ –ø–∞—Ä–æ–ª–∞:</label>
                        <div className="password-input-wrapper">
                            <input
                                type={showPasswords.new ? "text" : "password"}
                                value={passwordData.newPassword}
                                onChange={(e) => setPasswordData(prev => ({ 
                                    ...prev, 
                                    newPassword: e.target.value 
                                }))}
                                placeholder="–í—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞"
                                disabled={isLoading}
                                required
                            />
                            <button
                                type="button"
                                className="password-toggle"
                                onClick={() => togglePasswordVisibility('new')}
                                disabled={isLoading}
                            >
                                {showPasswords.new ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                            </button>
                        </div>
                        <div className="password-requirements">
                            –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–∞
                        </div>
                    </div>

                    <div className="password-form-group">
                        <label>–ü–æ—Ç–≤—ä—Ä–¥–∏ –Ω–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞:</label>
                        <div className="password-input-wrapper">
                            <input
                                type={showPasswords.confirm ? "text" : "password"}
                                value={passwordData.confirmPassword}
                                onChange={(e) => setPasswordData(prev => ({ 
                                    ...prev, 
                                    confirmPassword: e.target.value 
                                }))}
                                placeholder="–ü–æ–≤—Ç–æ—Ä–µ—Ç–µ –Ω–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞"
                                disabled={isLoading}
                                required
                            />
                            <button
                                type="button"
                                className="password-toggle"
                                onClick={() => togglePasswordVisibility('confirm')}
                                disabled={isLoading}
                            >
                                {showPasswords.confirm ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                            </button>
                        </div>
                    </div>

                    <div className="password-modal-actions">
                        <button 
                            type="button" 
                            className="password-cancel-btn"
                            onClick={onClose}
                            disabled={isLoading}
                        >
                            –û—Ç–∫–∞–∑
                        </button>
                        <button 
                            type="submit" 
                            className="password-save-btn"
                            disabled={isLoading}
                        >
                            {isLoading ? '–ü—Ä–æ–º–µ–Ω—è–Ω–µ...' : 'üîë –°–º–µ–Ω–∏ –ø–∞—Ä–æ–ª–∞'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default SySAdminCp;